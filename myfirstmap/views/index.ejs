<!-- 
cd myfirstmap  
$ npm start
npm 실행 후 nodemon 적용 
$ nodemon ./bin/www -->

<!DOCTYPE html>


<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <title>myfirstmap</title>
    <link rel="stylesheet" href="/stylesheets/style.css" />

    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=0uw2q15svl"></script> 
     <!-- 네이버 지도를 띄울 수 있는 코드  -->
    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?clientId=0uw2q15svl&submodules=geocoder"></script>
    <script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
    </script>
    <!-- jquery 사용  -->
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=780d534b77b01feff9f6ee1b40b05f5a&libraries=services"></script>
</head>

<body>
  <div id="navbar">위치 추적 및 저장/조회 시스템</div>
  <div id="infoBox">
    <div id="infoTitle">아래 버튼 클릭</div>
    <div id="infoContent"></div>
  </div>
  <div id="search">
    <input id="search_input" placeholder="가고 싶으신 장소를 검색하세요" />
    <button id="search_button">press enter</button>
  </div>
  <!-- <div id="search2">
    <input id="pfdel_input" placeholder="삭제하실 장소를 검색하세요" />
  </div> -->

  <div id="current">현재 위치</div>
  <div id="cumaddress">현재 위치 저장</div>
  <div id="prefersave">선호 장소 저장</div>
  <div id="login">로그인</div>
  <div id="registration">회원가입</div>
  <!-- <div id="mypage">마이페이지</div> -->
  <div id="list1">현재 위치 리스트</div> 
  <div id="list2">선호 장소 리스트</div> 
  <div id="deleteButton">선호 장소 삭제</div> 
  <div id="initializeSearch">마커 및 검색 기록 초기화</div> 
  <div id="visualize">저장된 선호장소 마커 표시</div>   
  <div id="map" style="width:100%;height:85vh;"></div>

  
  <!-- <button id = "list3" onclick="add_row()">행 추가하기</button> -->
  <button id = "list3" onclick="buildTable()">선호장소 테이블</button>
  <button id = "list4" onclick="buildTable2()">트래킹 테이블</button>  

  <button id='btn-empty'>테이블 초기화</button>
  
  <hr>
  <div class="table-wrapper">
  <table id = "tablelist" style="width:100% ;border: 1px solid ; position:relative; margin:auto; text-align:center">

    <tr style = "text-align:center">
      테이블 생성 위치
      <!-- <th>x 좌표</th>
      <th>y 좌표</th> -->
    </tr>
    <tbody id="table1" >
    </tbody>
  </table>
  </div>

  <script type="text/javascript" src="/data/data.js"></script>


  <script>


    //20201117
    // $.post("/api/Swtool?type=list1", function(data) {
    //   alert(data.json[0])
    // })



    //이부분이 insert문 실행하는 api호출하는 부분

    async function submitClick(time, c_address, c_coor_x, c_coor_y) {
      Json_form = "{\"is_time\":\""+time+"\",\"is_c_address\":\""+c_address+"\",\"is_c_coor_x\":\""+c_coor_x+"\",\"is_c_coor_y\":\""+c_coor_y+"\",\"is_Swt_function\":\"e\"}"
      try {
          const response = await fetch('/api/Swtool?type=save1', {
              method: 'POST',
              headers: {
              'Content-Type': 'application/json',
              },
              body: Json_form,
          });
          const body = await response.text();
          if(body == "succ"){
            alert("succ")
          }else{
              alert('작업중 오류가 발생하였습니다.')
          }  
      } catch (error) {
          alert('작업중 오류가 발생하였습니다.')
      }
    }


    async function submitClick2(p_address, p_coor_x, p_coor_y) {
      Json_form = "{\"is_p_address\":\""+p_address+"\",\"is_p_coor_x\":\""+p_coor_x+"\",\"is_p_coor_y\":\""+p_coor_y+"\",\"is_Swt_function\":\"e\"}"
      try {
          const response = await fetch('/api/Swtool?type=save2', {
              method: 'POST',
              headers: {
              'Content-Type': 'application/json',
              },
              body: Json_form,
          });
          const body = await response.text();
          if(body == "succ"){
            alert("succ")
          }else{
              alert('작업중 오류가 발생하였습니다.')
          }  
      } catch (error) {
          alert('작업중 오류가 발생하였습니다.')
      }
    }

    async function deleteClick(p_address) {
      Json_form = "{\"is_p_address\":\""+p_address+"\",\"is_Swt_function\":\"e\"}"
      try {
          const response = await fetch('/api/Swtool?type=delete1', {
              method: 'POST',
              headers: {
              'Content-Type': 'application/json',
              },
              body: Json_form,
          });
          const body = await response.text();
          if(body == "succ"){
            alert("succ")
          }else{
              alert('작업중 오류가 발생하였습니다.')
          }  
      } catch (error) {
          alert('작업중 오류가 발생하였습니다.')
      }
    }


  var mapOptions = {
      center: new naver.maps.LatLng(37.3595704, 127.105399),
      zoom: 10
  };

  var map = new naver.maps.Map('map', mapOptions);

  var markerList = [];
  var infowindowList = [];

  // pflist = [];

  // $('#visualize').click(()=> {
  // pushdata(pflist);
  // });
  
  
  for (var i = 0; i < pflist.length; i++) {
    var target = pflist[i];
    console.log(target);
    var coordinate = new naver.maps.LatLng(target.lat, target.lng);
    marker = new naver.maps.Marker({
      map: map,
      position : coordinate,
      icon : {
        content : "<div class = 'marker'></div>",
        anchor : new naver.maps.Point(12, 12)
      }
    });
    console.log(pflist.length);

    var content = `<div class = 'infowindow_wrap'>
      <div class = 'infowindow_content'>${target.content}</div>
    </div>`


  

    var infowindow = new naver.maps.InfoWindow({
      content : content,
      backgroundColor : "#00ff0000",
      borderColor : "00ff0000",
      anchorSize : new naver.maps.Size(0,0),
      // 말풍선형태 꼬리 anchorSize
      
    })

    var infoWindow = new naver.maps.InfoWindow({
      content : content ,
      anchorSkew: true
    });

 
    markerList.push(marker);
    infowindowList.push(infowindow);
    console.log(markerList);
    
  }
 
  // for (var i = 0 , ii = markerList.length; i < ii; i++){
  //   naver.maps.Event.addListener(map, "click", ClickMap(i));
  //   naver.maps.Event.addListener(markerList[i], "click", getClickHandler(i));
  // }

  function ClickMap(i) {
    return function () {
      var infowindow = infowindowList[i];
      infowindow.close(); 
    }
  }

  function getClickHandler(i) {
    return function () {
      var marker = markerList[i];
      var infowindow = infowindowList[i];
      if (infowindow.getMap()){
        infowindow.close();
      } else {
        infowindow.open(map, marker)
      }
    }
  }

  function makeAddress(item) {
    if (!item) {
        return;
    }
    var name = item.name,
        region = item.region,
        land = item.land,
        isRoadAddress = name === 'roadaddr';

    var sido = '', sigugun = '', dongmyun = '', ri = '', rest = '';

    if (hasArea(region.area1)) {
        sido = region.area1.name;
    }

    if (hasArea(region.area2)) {
        sigugun = region.area2.name;
    }

    if (hasArea(region.area3)) {
        dongmyun = region.area3.name;
    }

    if (hasArea(region.area4)) {
        ri = region.area4.name;
    }

    if (land) {
        if (hasData(land.number1)) {
            if (hasData(land.type) && land.type === '2') {
                rest += '산';
            }

            rest += land.number1;

            if (hasData(land.number2)) {
                rest += ('-' + land.number2);
            }
        }

        if (isRoadAddress === true) {
            if (checkLastString(dongmyun, '면')) {
                ri = land.name;
            } else {
                dongmyun = land.name;
                ri = '';
            }

            if (hasAddition(land.addition0)) {
                rest += ' ' + land.addition0.value;
            }
        }
    }

    return [sido, sigugun, dongmyun, ri, rest].join(' ');
  }

    function hasArea(area) {
        return !!(area && area.name && area.name !== '');
    }

    function hasData(data) {
        return !!(data && data !== '');
    }

    function checkLastString (word, lastString) {
        return new RegExp(lastString + '$').test(word);
    }

    function hasAddition (addition) {
        return !!(addition && addition.value);
    }
  
 
  cur_arr = [];
  cntaddress = 1 ;

  

// 현재위치 추적 JSON 생성 = > cur_arr

  function searchCoordinateToAddress(latlng) {
   
    today = new Date();   
    let year = today.getFullYear(); // 년도
    let month = today.getMonth() + 1;  // 월
    let date = today.getDate();  // 날짜
    let day = today.getDay();  // 요일
    let hours = today.getHours(); // 시
    let minutes = today.getMinutes();  // 분
    let seconds = today.getSeconds();  // 초
    let time = year+"-"+month+"-"+date+" "+hours +":"+ minutes +":"+ seconds;

    infoWindow.close();

    naver.maps.Service.reverseGeocode({
        coords: latlng,
        orders: [
            naver.maps.Service.OrderType.ADDR,
            naver.maps.Service.OrderType.ROAD_ADDR
        ].join(',')
    }, function(status, response) {
        if (status === naver.maps.Service.Status.ERROR) {
            return alert('무언가 잘못되었다!');
        }

        var items = response.v2.results,
            address = '',
            htmlAddresses = [];

        for (var i=0, ii=items.length, item, addrType; i<ii; i++) {
            item = items[i];
            address = makeAddress(item) || '';
            addrType = item.name === 'roadaddr' ? '[도로명 주소]' : '[지번 주소]';

            htmlAddresses.push((i+1) +'. '+ addrType +' '+ address);
            if (addrType === "[도로명 주소]"){
              cur_arr.push({"time" : time , "c_address" : address , "c_coor_x": latlng.x, "c_coor_y": latlng.y}); 
              
           
            } 
            else {
              cur_arr.push({"time" : time , "c_address" : address , "c_coor_x": latlng.x, "c_coor_y": latlng.y});  
          
            }
        }
        console.log(address);
        console.log(cur_arr);
        cntaddress++;
        

        infoWindow.setContent([
            '<div style="border-radius:2px; padding:5px; min-width:50px; line-height:110%; ">',
            '<h4 style="margin-top:20px; text-align:center">I am here!</h4><br/>',
            htmlAddresses.join('<br/>'),
            '</div>'
        ].join('\n'));

        infoWindow.open(map, latlng);
    });
  }

  function searchCoordinateToAddress2(latlng) {

    infoWindow.close();

    naver.maps.Service.reverseGeocode({
        coords: latlng,
        orders: [
            naver.maps.Service.OrderType.ADDR,
            naver.maps.Service.OrderType.ROAD_ADDR
        ].join(',')
    }, function(status, response) {
        if (status === naver.maps.Service.Status.ERROR) {
            return alert('무언가 잘못되었다!');
        }

        var items = response.v2.results,
            address = '',
            htmlAddresses = [];

        for (var i=0, ii=items.length, item, addrType; i<ii; i++) {
            item = items[i];
            address = makeAddress(item) || '';
            addrType = item.name === 'roadaddr' ? '[도로명 주소]' : '[지번 주소]';

            htmlAddresses.push((i+1) +'. '+ addrType +' '+ address);

            // if (addrType === "[지번 주소]"){
            //   cur_arr.push(address);
            // }
            // console.log(address);
            // console.log(cur_arr);
         
        }
        
        infoWindow.setContent([
            '<div style="border-radius:2px; padding:5px; min-width:50px; line-height:110%; ">',
            '<h4 style="margin-top:20px; text-align:center">I am here!</h4><br/>',
            htmlAddresses.join('<br/>'),
            '</div>'
        ].join('\n'));

        infoWindow.open(map, latlng);
    });
    }

  // let currentUse = true ; 


function currentsearch() {
  navigator.geolocation.getCurrentPosition(function(position){
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        const latlng = new naver.maps.LatLng(lat, lng);
        // if(currentUse){
        marker = new naver.maps.Marker({
          map : map,
          position : latlng,
          icon : {
            content : 
            '<img class = "pulse" draggable = "false" unselectable="on" src="https://myfirstmap.s3.ap-northeast-2.amazonaws.com/circle.png">'
            ,
            anchor: new naver.maps.Point(11,11)
          },
                  
        });
        searchCoordinateToAddress(latlng)  ;
        // array.push(searchCoordinateToAddress(latlng));
        // currentUse = false ; 
        // }
        map.setZoom(14, false); //이동하는 애니메이션은 주지 않는다
        map.panTo(latlng);

      })
      
  
}
 

var count = 0;
var repeat;  



  $('#current').click(() => {
    

    if ("geolocation" in navigator){
    //  curr = []
     console.log("It will append the address in to array in every 3 seconds 5 times");
      
      repeat = setInterval(function() {

        currentsearch();
        
        count++;

        if(count == 5){
          clearInterval(repeat);
        } 
        
      },3000);
      
 

    } else {
    alert("위치 정보 사용 불가능");
    }

    // console.log(cur_arr);


  }

  
  );




 

// 클릭시 cur_arr json sql 출력.....
  $('#cumaddress').click(()=> {
    var key = eval("1");
    var key2 = "1";
    console.log("zz1 : "+cur_arr[0].time);
    console.log(cur_arr); // 추적 json

    for(i=0;i<cur_arr.length;i++){
      submitClick(cur_arr[i].time, cur_arr[i].c_address, cur_arr[i].c_coor_x, cur_arr[i].c_coor_y)
    }


    let json1 = JSON.stringify(cur_arr);

    // fs.writeFile("test.txt", json1, function(err) {
    // if (err) {
    //     console.log(err);
    // }
    // });

    console.log(json1);


    

  }
  );

  // 클릭시 cum_address_arr json sql 출력.....
  $('#prefersave').click(()=> {
    var key = eval("1");
    var key2 = "1";
    console.log("zz1 : "+cur_arr.key);
    console.log("zz2 : "+cur_arr.key2);

    console.log(cum_address_arr); //선호장소 json

    let json2 = JSON.stringify(cum_address_arr);

    for(i=0;i<cum_address_arr.length;i++){
      submitClick2(cum_address_arr[i].p_address, cum_address_arr[i].p_coor_x, cum_address_arr[i].p_coor_y)
    }

    console.log(json2);

  }
  );

  var target1 = [];
  var target2 = [];

  $('#visualize').click(()=> {


  $.post("/api/Swtool?type=list2", function(data) {

  for (var i = 0; i < data.json.length; i++) {
    var target2 = data.json[i];
    console.log(target2);
    var coordinate = new naver.maps.LatLng(parseFloat(target2.p_coor_x), parseFloat(target2.p_coor_y));
    marker = new naver.maps.Marker({
      map: map,
      position : coordinate,
      icon : {
        content : "<div class = 'marker'></div>",
        anchor : new naver.maps.Point(12, 12)
      }
    });

    var content = `<div class = 'infowindow_wrap'>

      <div class = 'infowindow_content'>${target2.p_address}</div>

    </div>`

    var infowindow = new naver.maps.InfoWindow({
      content : content,
      backgroundColor : "#00ff0000",
      borderColor : "00ff0000",
      anchorSize : new naver.maps.Size(0,0),
      // 말풍선형태 꼬리 anchorSize
      
    })

    var infoWindow = new naver.maps.InfoWindow({
      content : content ,
      anchorSkew: true
    });

    markerList.push(marker);
    infowindowList.push(infowindow);
  }
  console.log(infowindowList);

  });
  
  
  }
  );

  for (var i = 0 , ii = markerList.length; i < ii; i++){
    naver.maps.Event.addListener(map, "click", ClickMap(i));
    naver.maps.Event.addListener(markerList[i], "click", getClickHandler(i));
  }


  $('#deleteButton').click(()=> {
    var key = eval("1");
    var key2 = "1";
    console.log("zz1 : "+cur_arr.key);
    console.log("zz2 : "+cur_arr.key2);

    console.log(cum_address_arr); //선호장소 json

    // let json2 = JSON.stringify(cum_address_arr);

    for(i=0;i<cum_address_arr.length;i++){
      alert("선호 장소를 삭제하는 것에 성공했습니다. \n 예시 : "+ cum_address_arr[i].p_address)
      deleteClick(cum_address_arr[i].p_address)
    }

    // console.log(json2);

  }
  );

  $('#initializeSearch').click(()=> {


    for(i=cum_address_arr.length; i>0; i--){

      cum_address_arr.pop();
    }

    alert("검색 기록을 초기화하는 것에 성공했습니다. ")    
    console.log(cum_address_arr);

    for(var i = 0; i < markerList.length; i++){
      markerList[i].setMap(null);
}

  }
  );



  // 리스트라는 버튼이 눌리면 react.tracking을 ejs 콘솔에 불러올 수 있도록 
  $('#list1').click(()=> {


    $.post("/api/Swtool?type=list1", function(data) {
      alert("현재 위치를 불러오는 것에 성공했습니다. \n 예시 : "+ data.json[0].c_address)
      for(i=0;i<data.json.length;i++){
      console.log(data.json[i].time, data.json[i].c_address, data.json[i].c_coor_x, data.json[i].c_coor_y)
    }
    })


  }
  );



  $('#list2').click(()=> {


    $.post("/api/Swtool?type=list2", function(data) {
      alert("선호 장소를 불러오는 것에 성공했습니다. \n 예시 : "+ data.json[0].p_address)
      for(i=0;i<data.json.length;i++){
      console.log(data.json[i].p_address, data.json[i].p_coor_x, data.json[i].p_coor_y)
  }
  })


  }
  );

  function add_row() {
    var my_tbody = document.getElementById('my-tbody');
    // var row = my_tbody.insertRow(0); // 상단에 추가
    var row = my_tbody.insertRow( my_tbody.rows.length ); // 하단에 추가
    var cell1 = row.insertCell(0);
    var cell2 = row.insertCell(1);
    var cell3 = row.insertCell(2);   
    
    $.post("/api/Swtool?type=list2", function(data) {
      for(i=0;i<data.json.length;i++){
      cell1.innerHTML = data.json[i].p_address;
      cell2.innerHTML = data.json[i].p_coor_x;
      cell3.innerHTML = data.json[i].p_coor_y;
      }

    })
  }

  // buildTable(myArray) 

  function buildTable() { 
    var table = document.getElementById('table1') 
    var head =
    `
    <tr
    style =     
    "border: 2px solid black; ">

      <th>주소</th>
      <th>x 좌표</th>
      <th>y 좌표</th>

    </tr>
    `
    table.innerHTML += head 
    $.post("/api/Swtool?type=list2", function(data){
      for (var i=0; i<data.json.length;i++) { 
      var row = 
      `<tr style = "border: 2px solid black; ">
        <td>${data.json[i].p_address}</td> 
        <td>${data.json[i].p_coor_x}</td> 
        <td>${data.json[i].p_coor_y}</td> 

        </tr>` 
        table.innerHTML += row 
    }
    })
    }

    // $.post("/api/Swtool?type=list1", function(data) {
    //   alert(data.json[0].c_address)
    //   for(i=0;i<data.json.length;i++){
    //   console.log(data.json[i].time, data.json[i].c_address, data.json[i].c_coor_x, data.json[i].c_coor_y)
    // }
    // })

    function buildTable2() { 
    var table = document.getElementById('table1') 
    var head =
    `
    <tr
    style =     
    "
    border: 2px solid black;">

      <th>시간</th>
      <th>주소</th>
      <th>x 좌표</th>
      <th>y 좌표</th>

    </tr>
    `
    table.innerHTML += head 

    $.post("/api/Swtool?type=list1", function(data){
      for (var i=0; i<data.json.length;i++) { 
      var row = 
      `<tr style = "border: 2px solid black; ">
        <td>${data.json[i].time}</td> 
        <td>${data.json[i].c_address}</td> 
        <td>${data.json[i].c_coor_x}</td> 
        <td>${data.json[i].c_coor_y}</td> 

        </tr>` 
        table.innerHTML += row 
    }
    })
    }


    $(function () {
    $('#btn-empty').click( function() {
        $( '#tablelist > tbody').empty();
    });
  });

  $("#pfdel_input").on("keydown", function(e){
    if(e.keyCode === 13){
      let content = $(this).val(); // 검색어가 content변수안에 담김 

    }
  }) 





  let ps = new kakao.maps.services.Places();
  let search_arr = [];
  let cum_address = [] ; 
  let cum_address_arr = [];
  // let cum_coord_dict = {};
  dict_count = 1 ; 

  $("#search_input").on("keydown", function(e){
    if(e.keyCode === 13){
      let content = $(this).val(); // 검색어가 content변수안에 담김 
      ps.keywordSearch(content, placeSearchCB);

    }
  }) 
  
  $("search_button").on('click', function(e){
    
    let content = $("#search_input").val();
    ps.keywordSearch(content, placeSearchCB);

  })

  $('#registration').click(()=> {
    onclick = window.open('./registration')
    // onclick = location.href = './registration';
  }
  );

  $('#login').click(()=> {
    // onclick = window.open('./Login')
    onclick = location.href = './Login';
  }
  );





  // (목적지 검색한 결과, 카카오api를 이용한 서버에 대한 상태, 검색결과가 얼마나 있는지 번호를 통해서 안다 )
  // cum_address_arr = 선호 장소 JSON 생성
  function placeSearchCB(data, status, pagination) {
    if (status === kakao.maps.services.Status.OK) {
      let target = data[0] ;
      const lat = target.y ;
      const lng = target.x ;
      const latlng = new naver.maps.LatLng(lat, lng);
      marker = new naver.maps.Marker({
        position : latlng ,
        map : map 
      })
      let spot = data[0] ;
      const address = spot.road_address_name +" "+ spot.place_name;
      
      if (search_arr.length == 0) {
        search_arr.push(marker);
      } 
      else {
        search_arr.push(marker)
        let pre_marker = search_arr.splice(0,1); //0번째 마커 추출 
        pre_marker[0].setMap(null) ;
      }
      map.setZoom(14, false);
      map.panTo(latlng);
      searchCoordinateToAddress2(latlng);

      if (cum_address.length == 0) {
       

        cum_address_arr.push({"p_address" :address,"p_coor_x": lat, "p_coor_y": lng}); 
      
        // console.log(spot);
        console.log(cum_address_arr);
        
        dict_count ++;
      } 
      else {
       

        cum_address_arr.push({"p_address" :address,"p_coor_x": lat, "p_coor_y": lng}); 

      
        // console.log(spot);

        console.log(cum_address_arr);
        
        dict_count ++ ; 
      }
      
      

    } else {
      alert("검색 결과가 없습니다")
    }

    for (var i = 0; i < cum_address_arr.length; i++) {
    var target1 = cum_address_arr[i];
    console.log(target1);
    var coordinate = new naver.maps.LatLng(target1.p_coor_x, target1.p_coor_y);
    marker = new naver.maps.Marker({
      map: map,
      position : coordinate,
      icon : {
        content : "<div class = 'marker'></div>",
        anchor : new naver.maps.Point(12, 12)
      }
    });
    markerList.push(marker);

  }

    
  }
  


</script>
</body>
</html>






 <!-- // marker = new naver.maps.Marker({
  //   map: map,
  //   // marker라는 변수를 만들어 지도에 표시가 되고 
  //   // 표시가 되는 지도는 map이라는 변수 위에 띄어질 예정이고 
  //   // 마커에 대한 위치는 position 적어놓은 경도와 위도에 표시가 될 예정
  //   position : new naver.maps.LatLng(37.3595704, 127.105399),
  //   icon : {
  //     content : "<div class = 'marker'></div>"
  //     // icon 같은 경우는 marker라는 div class가 표시될 예정
  //   }
  // })  -->
  <!-- 네이버 api 참조 사이트  -->
  <!-- // https://navermaps.github.io/maps.js.ncp/docs/tutorial-2-Getting-Started.html  -->
 
<!-- every 10 second save print data into csv  -->
<!-- javascript timer event -->
<!-- use function to give return value (current date and time,lat,long, address name) -->

<!-- 
쿼리 기능
DB를 찾아서 3초마다  -->